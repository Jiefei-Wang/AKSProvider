% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adaptor.R
\name{getDockerInstanceIps,AKSProvider-method}
\alias{getDockerInstanceIps,AKSProvider-method}
\title{#' Run the worker container
#'
#' Run the workers and return a list of worker instance handles.
#' The function will set the environment variable \code{ECSFargateCloudJobQueueName},
#' \code{ECSFargateCloudServerIP} and \code{ECSFargateCloudWorkerNumber} to the container
#'
#' @inheritParams DockerParallel::runDockerWorkers
#'
#' @return A list of worker handle in character
#' @export
setMethod("runDockerWorkers", "AKSProvider",
function(provider, cluster, container, hardware, workerNumber, verbose = 0L){
verbosePrint(verbose>0, "Deploying worker container")
instanceIds <- c()
maxWorkers <- getMaxWorkerPerContainer(hardware)
maxWorkers <- min(container$maxWorkerNum, maxWorkers)
## run the containers which have the maximum worker number
containerWithMaxWorker <- floor(workerNumber/maxWorkers)
if(containerWithMaxWorker>0){
instances <- ecsRunWorkers(
provider=provider,
cluster=cluster,
container=container,
hardware=hardware,
containerNumber=containerWithMaxWorker,
workerPerContainer=maxWorkers,
verbose=verbose
)
if(length(instances)!= containerWithMaxWorker){
stopTasks(provider$clusterName, instances)
stop("Fail to deploy the ECS worker container, something is wrong")
}
instanceIds<-c(instanceIds, instances)
}
## Run the container which does not have the maximum worker number
lastContainerWorkerNum <- workerNumber - maxWorkers*containerWithMaxWorker
if(lastContainerWorkerNum!=0){
instance <- ecsRunWorkers(
provider=provider,
cluster=cluster,
container=container,
hardware=hardware,
containerNumber=1,
workerPerContainer=lastContainerWorkerNum,
verbose=verbose)
instanceIds <-c (instanceIds, instance)
if(length(instance)!=1){
stopTasks(provider$clusterName, instance)
stop("Fail to deploy the ECS worker container, something is wrong")
}
}}
\usage{
\S4method{getDockerInstanceIps}{AKSProvider}(provider, instanceHandles, verbose = 0L)
}
\arguments{
\item{provider}{S4 \code{CloudProvider} object. The service provider.}

\item{instanceHandles}{List. A list of instance handles.}

\item{verbose}{Integer. The verbose level, default 1.}
}
\value{
A data.frame with publicIp and privateIp columns and each row corresponds to
an element in instanceHandles.
}
\description{
\preformatted{          ## Repeat the instance id worker number times.
          workerNumberPerContainer <- rep(maxWorkers, length(instanceIds))
          if(lastContainerWorkerNum!=0)\{
              workerNumberPerContainer[length(instanceIds)] <- lastContainerWorkerNum
          \}
          repeatVector(instanceIds, workerNumberPerContainer)
      \}
}

)
}
\details{
Get the instance public/private IPs

Get the instance public/private IPs
}
